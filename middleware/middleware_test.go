package middleware

import (
	"context"
	"encoding/json"
	"errors"
	"github.com/dgrijalva/jwt-go"
	"github.com/gorilla/mux"
	"github.com/stretchr/testify/assert"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"log"
	"net/http"
	"net/http/cookiejar"
	"net/http/httptest"
	"pastebin/models"
	"pastebin/server"
	"strings"
	"testing"
	"time"
)

func TestRateLimiterMiddleware(t *testing.T) {
	// –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("OK"))
	})

	// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ middleware
	testHandler := RateLimiterMiddleware(handler)

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
	server := httptest.NewServer(testHandler)
	defer server.Close()

	client := server.Client()

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
	for i := 0; i < 10; i++ { // –ë–æ–ª—å—à–µ, —á–µ–º requestsPerSecond
		resp, err := client.Get(server.URL)
		if err != nil {
			t.Fatalf("Request failed: %v", err)
		}
		defer resp.Body.Close()

		if i < 5 && resp.StatusCode != http.StatusOK { // –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã
			t.Errorf("Expected status 200, got %d", resp.StatusCode)
		}

		if i >= 5 && resp.StatusCode != http.StatusTooManyRequests { // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
			t.Errorf("Expected status 429, got %d", resp.StatusCode)
		}
	}
}

func TestAdminMiddleware(t *testing.T) {
	tests := []struct {
		name       string
		token      string
		expectCode int
	}{
		{"–ë–µ–∑ —Ç–æ–∫–µ–Ω–∞", "", http.StatusForbidden},
		{"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω", "invalid_token", http.StatusUnauthorized},
		{"–ù–µ-–∞–¥–º–∏–Ω", generateToken("user@example.com"), http.StatusForbidden},
		{"–ê–¥–º–∏–Ω", generateToken("admin@example.com"), http.StatusOK},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			req := httptest.NewRequest("GET", "/admin", nil)
			if tt.token != "" {
				req.AddCookie(&http.Cookie{Name: "token", Value: tt.token})
			}

			rec := httptest.NewRecorder()
			handler := AdminMiddleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusOK)
				json.NewEncoder(w).Encode(map[string]string{"message": "success"})
			}))

			handler.ServeHTTP(rec, req)
			if rec.Code != tt.expectCode {
				t.Errorf("–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å %d, –ø–æ–ª—É—á–µ–Ω %d", tt.expectCode, rec.Code)
			}
		})
	}
}

// –ü–æ–¥–¥–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
var mockUsers = map[string]models.User{
	"admin@example.com": {Email: "admin@example.com", Role: "admin"},
	"user@example.com":  {Email: "user@example.com", Role: "user"},
}

// –ü–æ–¥–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func mockFindUserByEmail(ctx context.Context, email string) (models.User, error) {
	user, exists := mockUsers[email]
	if !exists {
		return models.User{}, errors.New("user not found")
	}
	return user, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT-—Ç–æ–∫–µ–Ω–∞
func generateToken(email string) string {
	claims := jwt.MapClaims{
		"email": email,
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	signedToken, _ := token.SignedString([]byte("your-secret-key"))
	return signedToken
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
var testDB *mongo.Database

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–∑–∞–º–µ–Ω–∞ SetupRouter)
func setupRouter() *mux.Router {
	r := mux.NewRouter()
	r.HandleFunc("/login", server.LoginHandler).Methods("POST")
	r.HandleFunc("/admin", AdminMiddleware(server.AllPastesHandler)).Methods("GET")
	return r
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π MongoDB
func setupTestDB() *mongo.Database {
	clientOptions := options.Client().ApplyURI("mongodb://localhost:27017")

	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	err = client.Ping(context.Background(), nil)
	if err != nil {
		log.Fatalf("MongoDB –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: %v", err)
	}

	log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î")
	return client.Database("testdb")
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
var testAdmin = models.User{
	Email:        "ofblooms@gmail.com",
	PasswordHash: "1234",
	Role:         "admin",
}

// üîπ **E2E-—Ç–µ—Å—Ç**
func TestEndToEnd(t *testing.T) {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ nil
	testDB = setupTestDB()
	if testDB == nil {
		t.Fatal("‚ùå testDB –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
	}

	// –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	_, err := testDB.Collection("users").InsertOne(ctx, testAdmin)
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	server := httptest.NewServer(setupRouter())
	defer server.Close()

	// HTTP-–∫–ª–∏–µ–Ω—Ç —Å –∫—É–∫–∞–º–∏
	jar, _ := cookiejar.New(nil)
	client := &http.Client{Jar: jar}

	// –õ–æ–≥–∏–Ω –∑–∞–ø—Ä–æ—Å
	loginData := `{"email": "admin@example.com", "password": "1234"}`
	resp, err := client.Post(server.URL+"/login", "application/json", strings.NewReader(loginData))
	if err != nil {
		t.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /login: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
	assert.Equal(t, http.StatusOK, resp.StatusCode, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

	log.Println("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É–∫
	cookies := resp.Cookies()
	assert.NotEmpty(t, cookies, "‚ùå –ö—É–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
}
